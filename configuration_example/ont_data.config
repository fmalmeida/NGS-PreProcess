/*


                                      fmalmeida/ngs-preprocess pipeline configuration file

                    Maintained by Felipe Marques de Almeida
                    Contact: almeidafmarques@outlook.com

                    This file conatains all the parameters that are required by the pipeline.
                    Some of them can be left in blank and other ones need a proper configuration.
                    Every file containing a parameter will contain comments to guide its configuration.




 */

/*


                    Customizable parameters

                    All parameters are set under the params {} function.

                    Please do not change anything before the = sign.

                    Fields must be configured and set with values after the = sign.

                    Since the input file parameters will always work as a pattern match
                    it is required that it MUST ALWAYS be double quoted as the example below.

                    The pipeline will process each file that matches the pattern separately.

                                E.g. param1 = "my_reads/input*.fastq"


 */

params {
  /*


                    General (mandatory) Parameters


   */

  outdir  = 'output'                                    // Sets output directory
  threads = 2                                           // Sets number of threads to be used
  parallel_jobs = 1                                     // Number of jobs to run in parallel. Be aware that each job (in parallel) can consume
                                                        // N threads (set above). Be sure to carefully check your resources before augmenting
                                                        // this parameter. For example: parallel_jobs = 2 + threads = 5 can consume until 10
                                                        // threads at once.
  nanopore_fastq = ''                                   // Path to nanopore ONT basecalled reads in fastq

  /*

                      Optional parameter for filtering longreads from pacbio or nanopore.
                      This command uses nanofilt for both technologies. If you prefer to
                      filter reads from any technology with a different program you can
                      left it blank and it you not be executed.

  */
  lreads_min_quality =                                  // If blank, lreads will not be filtered.
  lreads_min_length  =                                  // If blank, lreads will not be filtered.

  /*


                      Additional parameters for nanopore ONT longreads preprocessing


   */

  nanopore_is_barcoded = false                          // Tells wheter or not nanopore reads are barcoded
                                                        // It will split barcodes into single files
  nanopore_sequencing_summary = ''                      // Path to nanopore 'sequencing_summary.txt'. Using this will make the pipeline render a
                                                        // sequencing statistics report using pycoQC

}

/*


                      Configuring Nextflow Scopes.

                      Enable or not the production of Nextflow Reports


 */

//Trace Report
trace {
    enabled = true                                      // Enable? true or false
    file = "${params.outdir}" + "/annotation_pipeline_trace.txt"
    fields = 'task_id,name,status,exit,realtime,cpus,%cpu,memory,%mem,rss'
}

//Timeline Report
timeline {
    enabled = true                                      // Enable? true or false
    file = "${params.outdir}" + "/annotation_pipeline_timeline.html"
}

//Complete Report
report {
    enabled = true                                      // Enable? true or false
    file = "${params.outdir}" + "/annotation_pipeline_nextflow_report.html"
}

/*
                                    Setting up NF profiles
                            To use different profiles and executors
            please read more at: https://www.nextflow.io/docs/latest/config.html#config-profiles
 */
profiles {
  standard {
    // Executor
    process.executor = 'local'
    // QueueSize limit
    qs = (params.parallel_jobs) ? params.parallel_jobs : 1
    executor {
          name = 'local'
          queueSize = qs
    }
  }
}
